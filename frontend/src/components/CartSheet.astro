---

import { getCheckoutClientSecret } from "../data/polar"

const {clientSecret} = await getCheckoutClientSecret()

---

<style>
  #cart {
    position: fixed;
    top: 0;
    right: 0;
    width: 350px;
    height: 100vh;
    background-color: white;
    z-index: 5;
    overflow-y: auto;
    padding-top: 2rem;
    transition: transform 0.3s ease-in-out;
  }

  #cart aside {
    padding: 20px;
  }

  cart-items ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  cart-items li {
    display: grid;
    grid-template-columns: 80px 1fr;
    grid-template-areas:
      "img title"
      "img quantity";
    gap: 10px;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
  }

  cart-items img {
    grid-area: img;
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
  }

  cart-items h3 {
    grid-area: title;
    margin: 0;
    font-size: 16px;
  }

  cart-items p {
    grid-area: quantity;
    margin: 5px 0 0;
    font-size: 14px;
    color: #666;
  }

  cart-items p:empty {
    font-size: 16px;
    padding: 30px 0;
    text-align: center;
    color: #999;
  }

  .close-cart-button {
    grid-area: close;
    justify-self: end;
    align-self: start;
    font-size: 24px;
    cursor: pointer;
    border: none;
    background-color: transparent;
    padding: 0;
    margin: 0;
  }

  .cart-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.05);
      z-index: 4;
      display: none;
    }

</style>

<div class="cart-overlay" id="cart-overlay"></div>

<cart-sheet>
<div id="cart" style="display: none">
      <aside>
        <button class="close-cart-button">тип</button>
        <cart-items data-polar-token={clientSecret}></cart-items>
      </aside>
</div>
</cart-sheet>

<script>
import { $cartItems, $isCartOpen, addCartItem, clearCart, removeCartItem } from '../store/cart';
import { getFormattedPrice } from '../utils/getFormattedPrice';

    class CartSheet extends HTMLElement {
      cart=null
      closeButton=null
      overlay=null

      constructor() {
        super();

        this.cart = document.getElementById('cart');
        this.closeButton = document.querySelector('.close-cart-button');
        this.overlay = document.getElementById('cart-overlay');

        $isCartOpen.subscribe(open => {
          if (open) {
            this.cart.style.display = 'block';
            this.overlay.style.display = 'block';
          } else {
            this.cart.style.display = 'none';
            this.overlay.style.display = 'none';
          }
        })
      }

      connectedCallback() {
        this.overlay.addEventListener('click', () => {
                $isCartOpen.set(false);
        });
        this.closeButton.addEventListener('click', () => {
                $isCartOpen.set(false);
        });
      }

      disconnectedCallback() {
        this.overlay.removeEventListener('click', () => {
                $isCartOpen.set(false);
        });
        this.closeButton.removeEventListener('click', () => {
                $isCartOpen.set(false);
        });
      }
    }


   class CartItems extends HTMLElement {
     polarToken =null

     constructor() {
       super();
       this.render();
       this.polarToken = this.getAttribute('data-polar-token');

       $cartItems.subscribe(async items => {
        await this.render(items);
       });
     }

    async render(items = $cartItems.get()) {
       const values = Object.values(items);

       if (values.length) {
         this.innerHTML = `
           <ul>
             ${values.map(cartItem => `
               <li>
                 <h3>${cartItem.title}</h3>
                 <img width="80" height="80" src="${cartItem.imageSrc}" alt="Preview image for ${cartItem.title}">
                 <button data-item-id="${cartItem.id}" class="remove-button">Remove</button>
                 <p>Quantity: ${cartItem.quantity}</p>
                 <button data-item-id="${cartItem.id}" class="add-button">Add</button>
                 <p>Price: ${getFormattedPrice({amount: cartItem.unitPrice * cartItem.quantity, currency: cartItem.currency})}</p>
               </li>
             `).join('')}
             <li>
               <h3>Total</h3>
               <p>${getFormattedPrice({amount: values.reduce((acc, item) => acc + item.unitPrice * item.quantity, 0), currency: values[0].currency})}</p>
             </li>
           </ul>
           <a href='#' class="checkout-button">Checkout</a>
           <button class="clear-button">Clear Cart</button>
         `;

         await this.addButtonEventListeners();
       } else {
         this.innerHTML = `<p>Your cart is empty</p>`;
       }
     }

     async addButtonEventListeners() {
         // Add event listeners for remove buttons
         const removeButtons = this.querySelectorAll('.remove-button');
         removeButtons.forEach(button => {
           button.addEventListener('click', (event) => {
             const itemId = button.getAttribute('data-item-id');
             removeCartItem(itemId);
           });
         });

         // Add event listeners for add buttons
         const addButtons = this.querySelectorAll('.add-button');
         addButtons.forEach(button => {
           button.addEventListener('click', (event) => {
             const itemId = button.getAttribute('data-item-id');
             addCartItem($cartItems.get()[itemId]);
           });
         });

         // Add event listener for clear cart button
         const clearButton = this.querySelector('.clear-button');
         if (clearButton) {
           clearButton.addEventListener('click', () => {
             clearCart();
           });
         }

         // Add event listener for checkout button
         const checkoutLink = this.querySelector('.checkout-button') as  HTMLAnchorElement;

         const getOptions = {method: 'GET'};
         const clientSecret = this.polarToken



         const res = await fetch(`https://api.polar.sh/v1/checkouts/client/${clientSecret}`, getOptions)
           .then(response => response.json())
           .catch(err => console.error(err));

         checkoutLink.href = res.url;
       }
   }

   customElements.define('cart-sheet', CartSheet);
   customElements.define('cart-items', CartItems);
</script>
