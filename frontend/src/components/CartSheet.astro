<style>
  #cart {
    position: fixed;
    top: 0;
    right: 0;
    width: 350px;
    height: 100vh;
    background-color: white;
    z-index: 2;
    overflow-y: auto;
    padding-top: 2rem;
    transition: transform 0.3s ease-in-out;
  }

  #cart aside {
    padding: 20px;
  }

  cart-items ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  cart-items li {
    display: grid;
    grid-template-columns: 80px 1fr;
    grid-template-areas:
      "img title"
      "img quantity";
    gap: 10px;
    padding: 15px 0;
    border-bottom: 1px solid #eee;
  }

  cart-items img {
    grid-area: img;
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
  }

  cart-items h3 {
    grid-area: title;
    margin: 0;
    font-size: 16px;
  }

  cart-items p {
    grid-area: quantity;
    margin: 5px 0 0;
    font-size: 14px;
    color: #666;
  }

  cart-items p:empty {
    font-size: 16px;
    padding: 30px 0;
    text-align: center;
    color: #999;
  }

    .cart-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.05);
        z-index: 1;
        display: none;
      }

</style>

<div class="cart-overlay" id="cart-overlay"></div>

<cart-sheet>
<div id="cart" style="display: none">
      <aside>
        <cart-items></cart-items>
      </aside>
</div>
</cart-sheet>

<script>
  import { $cartItems, $isCartOpen } from '../store/cart';


    class CartSheet extends HTMLElement {
      cart=null
      overlay=null

      constructor() {
        super();
        this.cart = document.getElementById('cart');
        this.overlay = document.getElementById('cart-overlay');

        $isCartOpen.subscribe(open => {
          if (open) {
            this.cart.style.display = 'block';
            this.overlay.style.display = 'block';
          } else {
            this.cart.style.display = 'none';
            this.overlay.style.display = 'none';
          }
        })
      }

      connectedCallback() {
        this.overlay.addEventListener('click', () => {
                $isCartOpen.set(false);
        });
      }

      disconnectedCallback() {
        this.overlay.removeEventListener('click', () => {
                $isCartOpen.set(false);
        });
      }
    }


   class CartItems extends HTMLElement {
     constructor() {
       super();
       this.render();

       $cartItems.subscribe(items => {
         this.render(items);
       });
     }

     render(items = $cartItems.get()) {
       const values = Object.values(items);

       if (values.length) {
         this.innerHTML = `
           <ul>
             ${values.map(cartItem => `
               <li>
                 <h3>${cartItem.title}</h3>
                 <img width="80" height="80" src="${cartItem.imageSrc}" alt="Preview image for ${cartItem.title}">
                 <p>Quantity: ${cartItem.quantity}</p>
               </li>
             `).join('')}
           </ul>
         `;
       } else {
         this.innerHTML = `<p>Your cart is empty!</p>`;
       }
     }
   }

   customElements.define('cart-sheet', CartSheet);
   customElements.define('cart-items', CartItems);
</script>
